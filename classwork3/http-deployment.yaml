apiVersion: v1
kind: ConfigMap
metadata:
  name: httpserver-config
data:
  config.json: |-
    {
      "timeout": "3s",
      "httpport": "8080"
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: httpserver-app
spec:
  replicas: 4
  selector:
    matchLabels:
      app: httpserver-app
  template:
    metadata:
      labels:
        app: httpserver-app
    spec:
      containers:
      - name: httpserver-app
        image: httpserver:test
        command: ["/bin/sh","-c"]
        args: ["/httpserver -log_dir=/tmp -alsologtostderr"]
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            memory: "128Mi"
            cpu: "500m"
        env:
          - name: CONFIG_PATH
            value: "/config/myconfig/config.json"
        ports:
        - containerPort: 8080
        readinessProbe:
          httpGet:  
            path: /healthz 
            port: 8080
          periodSeconds: 10
        livenessProbe:
          tcpSocket:
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 20
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh"，"-c"，"sleep 10s && kill -QUIT 1"]
        volumeMounts:
        - mountPath: /config/myconfig/config.json
          name: config
          subPath: config.json
          readOnly: true
      volumes:
        - name: config
          configMap:
            name: httpserver-config
---
apiVersion: v1
kind: Service
metadata:
  name: httpserver-app
spec:
  selector:
    app: httpserver-app
  ports:
  - port: 8080
    targetPort: 8080
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: httpserver
  namespace: default
  annotations:
    kubernetes.io/ingress.class: "nginx"
spec:
  rules:
  - host: demo.localdev.me
    http:
      paths:
      - backend:
          service:
            name: httpserver-app
            port:
              number: 8080
        path: /
        pathType: Prefix
